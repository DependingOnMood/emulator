angular.module("myApp").service("randomService",function(){"use strict";function a(a){if(void 0===a)throw new Error("You forgot to pass randomIndex when calling randomService method, e.g., you should call randomService.random(42); randomIndex should be an index of a random number. In a specific match, calling randomService.random(42) multiple times will return the same random number.")}if(!Math.seedrandom)throw new Error("You forgot to include in your HTML: <script src='http://cdnjs.cloudflare.com/ajax/libs/seedrandom/2.3.11/seedrandom.min.js'></script>");var b=Math.random,c=null,d=null;this.setSeed=function(a){d=a,c=[],Math.seedrandom(d),Math.random=function(){throw new Error("Do NOT use Math.random(); Instead, use randomService.random(randomIndex)")}},this.random=function(d){a(d);for(var e=c.length;d>=e;e++)c[e]=b();return c[d]},this.randomFromTo=function(b,c,d){if(a(b),void 0===c||void 0===d||c>=d)throw new Error("In randomService.randomFromTo(randomIndex, from,to), you must have from<to, but from="+c+" to="+d);return Math.floor(this.random(b)*(d-c)+c)},this.doNotUseInYourGameGetOriginalMathRandom=function(){return b()},this.setSeed(0)}).service("realTimeService",["$window","$log","$timeout","messageService","resizeGameAreaService","randomService",function(a,b,c,d,e,f){"use strict";function g(a,b){var c=B[a];if(b.gotMessage)c.gotMessage(b.gotMessage);else if(b.gotStartMatch)c.gotStartMatch(b.gotStartMatch);else{if(!b.gotEndMatch)throw new Error("Unknown msg="+angular.toJson(b));c.gotEndMatch(b.gotEndMatch)}}function h(a,b){return 0===E?void g(a,b):(G[a].push(b),void c(function(){var b=G[a].shift();g(a,b)},E*f.doNotUseInYourGameGetOriginalMathRandom()))}function i(b){if(B)throw new Error("You can call realTimeService.init(params) exactly once!");var c=b.createCanvasController;if(!(b&&b.createCanvasController&&b.canvasWidth&&b.canvasHeight))throw new Error("When calling realTimeService.init(params), params must contain: createCanvasController, canvasWidth, canvasHeight.");a.gameDeveloperEmail=b.gameDeveloperEmail,y=b.canvasWidth,z=b.canvasHeight;var d,e='<div id="gameArea">';for(d=0;v>d;d++)e+='<canvas id="canvas'+d+'" style="display: none; margin: 0; padding: 0; position: absolute;" width="'+y+'" height="'+z+'"></canvas>';for(A=[],B=[],document.body.innerHTML=e+"</div>",d=0;v>d;d++){var f=document.getElementById("canvas"+d);if(!f)throw new Error("Couldn't find canvas"+d);A[d]=f;var g=c(f);if(!(g&&g.gotStartMatch&&g.gotMessage&&g.gotEndMatch))throw new Error("createCanvasController should return a canvasController with the methods: gotStartMatch, gotMessage, and gotEndMatch.");B[d]=g,G[d]=[]}x.init()}function j(a){function c(b,c){if(C){q(b);for(var d={fromPlayerIndex:a,message:b},e=0;e<C.length;e++)if(e!==a){if(0!==F&&!c&&f.doNotUseInYourGameGetOriginalMathRandom()<F)continue;h(e,{gotMessage:d})}}}function d(a){if(C){b.info("Got endMatchScores="+a);for(var c=0;c<C.length;c++)h(c,{gotEndMatch:a});u(a)}}return{sendReliableMessage:function(a){c(a,!0)},sendUnreliableMessage:function(a){c(a,!1)},endMatch:d}}function k(a){for(var b=window.innerWidth,c=window.innerHeight,d=null,e=null,f=1;a>=f;f++)for(var g=1;a>=g;g++)if(f*g===a){var h=y*g,i=z*f,j=b/h,k=c/i,l=Math.min(j,k);(!d||l>d)&&(d=l,e={rows:f,cols:g})}return e}function l(a){for(var b=0;v>b;b++)A[b].style.display=a>b?"inline":"none";var c=k(a),d=c.rows,f=c.cols;e.setWidthToHeight(y*f/(z*d));for(var g=100/f,h=100/d,i=.05,j=0;d>j;j++)for(var l=0;f>l;l++){var m=j*h+h*i/2,n=l*g+g*i/2,o=l+j*f;A[o].style.top=""+m+"%",A[o].style.left=""+n+"%",A[o].style.width=""+g*(1-i)+"%",A[o].style.height=""+h*(1-i)+"%"}}function m(a){if(C)throw new Error("Got message.gotStartMatch before getting gotEndMatch");if(C=a.playersInfo,!C||!C.length)throw new Error("Got gotStartMatch where playersInfo wasn't a non-empty array");if(C.length>v)throw new Error("Got gotStartMatch where playersInfo has more than 8 players!");if(D=void 0===a.yourPlayerIndex,l(D?C.length:1),f.setSeed(a.randomSeed),D)for(var b=0;b<C.length;b++)h(b,{gotStartMatch:{playersInfo:C,yourPlayerIndex:b,matchController:j(b)}});else h(0,{gotStartMatch:{playersInfo:C,yourPlayerIndex:a.yourPlayerIndex,matchController:{sendReliableMessage:s,sendUnreliableMessage:t,endMatch:u}}})}function n(a){if(D)throw new Error("Got gotMessage when isSingleDevice");if(C){if(C.length<=1)throw new Error("Got message.gotMessage in single-player.");B[0].gotMessage(a)}}function o(a){if(D)throw new Error("Got gotMessage when isSingleDevice");C=null,B[0].gotEndMatch(a)}function p(b){if(a.lastMessage=b,b.gotStartMatch)m(b.gotStartMatch);else if(b.gotMessage)n(b.gotMessage);else{if(!b.gotEndMatch)throw new Error("Unknown message: "+angular.toJson(b));o(b.gotEndMatch)}}function q(a){if(!a||"string"!=typeof a)throw new Error("When calling realTimeService.sendReliableMessage(message), you must pass a non-empty string as the message.");if(a.length>=1e3&&console.log("CAREFUL: Maximum message length is 1000, but you passed a message of length "+a.length+". The platform will try to zip the message, but if it is still big then the match will be ended in a tie"),!C)throw new Error("You must not send a message before getting game.startMatch")}function r(a){if(q(a),D)throw new Error("Trying to send message when isSingleDevice");return 1===C.length}function s(a){r(a)||x.sendMessage({sendReliableMessage:a})}function t(a){r(a)||x.sendMessage({sendUnreliableMessage:a})}function u(a){if(!C)throw new Error("You must not call realTimeService.endMatch(endMatchScores) before getting game.gotStartMatch");if(!a||a.length!==C.length)throw new Error("When calling realTimeService.endMatch(endMatchScores), you must pass an array of the same length as the number of players in gotStartMatch.");C=null,x.sendMessage({endMatch:a})}var v=8,w=function(){var a=location.search.substr(1),b={};return a.split("&").forEach(function(a){var c=a.split("=");b[c[0]]=decodeURIComponent(c[1])}),b}(),x=function(){function e(){c(function(){b.info("Sending gotStartMatch");for(var a=[],c=0;j>c;c++)a.push({playerId:42+c});p({gotStartMatch:{playersInfo:a,randomSeed:"someRandomSeed"+f.doNotUseInYourGameGetOriginalMathRandom()}})},2e3)}function g(){i?e():(d.addMessageListener(p),d.sendMessage({gameReady:!0}))}function h(a){if(i){if(!a.endMatch)throw new Error("Shouldn't send messages in local testing");e()}else d.sendMessage(a)}var i=a.parent===a,j=Number(w.testPlayers);if(j||(j=1),j>v)throw new Error("The maximum number of players is 8!");return{init:g,sendMessage:h}}(),y=null,z=null,A=null,B=null,C=null,D=null,E=Number(w.delay);E||(E=0);var F=Number(w.loseUnreliable);F||(F=0);var G=[];this.init=i}]),angular.module("myApp").service("messageService",["$window","$log","$rootScope",function(a,b,c){"use strict";this.sendMessage=function(c){b.info("Game sent message",c),a.parent.postMessage(c,"*")},this.addMessageListener=function(d){a.addEventListener("message",function(e){var f=e.source;f===a.parent&&c.$apply(function(){var a=e.data;b.info("Game got message",a),d(a)})},!1)}}]).factory("$exceptionHandler",["$window","$log",function(a,b){"use strict";return function(c,d){b.error("Game had an exception:",c,d);var e=angular.toJson({exception:c,stackTrace:c.stack,cause:d,lastMessage:a.lastMessage},!0),f={emailJavaScriptError:{gameDeveloperEmail:a.gameDeveloperEmail,emailSubject:"Error in game "+a.location,emailBody:e}};throw a.parent.postMessage(f,"*"),c}}]),angular.module("myApp").service("resizeGameAreaService",["$window","$log",function(a,b){"use strict";function c(a){g=a,h=null,e()}function d(a){return Math.round(100*a)/100}function e(){if(null!==g){var c=a.innerWidth,e=a.innerHeight;if(null===h||h.windowWidth!==c||h.windowHeight!==e){h={windowWidth:c,windowHeight:e};var i=.05,j=f.getElementById("gameArea");if(0===c||0===e)return b.info("Window width/height is 0 so hiding gameArea div."),void(j.style.display="none");j.style.display="block";var k=c/e;k>g?c=d(e*g):e=d(c/g),b.info("Window size is "+h.windowWidth+"x"+h.windowHeight+" so setting gameArea size to "+c+"x"+e+" because widthToHeight="+g);var l=-e/2,m=-c/2;j.style.width=(1-i)*c+"px",j.style.height=(1-i)*e+"px",j.style.marginTop=""+l+"px",j.style.marginLeft=""+m+"px",j.style.position="absolute",j.style.left="50%",j.style.top="50%"}}}var f=a.document,g=null,h=null;a.onresize=e,a.onorientationchange=e,f.addEventListener("onresize",e),f.addEventListener("orientationchange",e),setInterval(e,1e3),this.setWidthToHeight=c}]);
//# sourceMappingURL=realTimeServices.min.js.map