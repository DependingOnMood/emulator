angular.module("myApp").service("stateService",["$window","$timeout","$log","$rootScope",function(a,b,c,d){"use strict";function e(a){S=a,void 0!==F&&(g(),A())}function f(a){O=a}function g(){N=[];for(var a=r(F.minNumberOfPlayers,F.maxNumberOfPlayers+1),b=0;a>b;b++){var c="onlyAIs"===S||0!==b&&"playAgainstTheComputer"===S?"":""+(b+42);N.push({playerId:c})}}function h(){F||m("You must call setGame before any other method."),g(),G={},H=null,I={},J=null,K=[],L=0,Q=0,R=null,P=0}function i(){h(),x()}function j(a){var b=[];for(var c in a)a.hasOwnProperty(c)&&b.push(c);return b}function k(a){return angular.copy(a)}function l(a){return void 0===a||null===a}function m(){c.error("Throwing an error with these arguments=",arguments);var a=Array.prototype.join.call(arguments,", ");throw new Error(a)}function n(a,b){return l(a[b])&&m("You must have a field named '",b,"' in this object=",a),a[b]}function o(a,b){for(var c=[],d=0;d<b.length;d++){var e=b[d];c.push(l(e.set)||l(e.set.visibleToPlayerIndexes)||-1!==e.set.visibleToPlayerIndexes.indexOf(a)?e:{type:"Set",key:e.set.key,value:null,visibleToPlayerIndexes:e.set.visibleToPlayerIndexes})}return c}function p(a,b,c){if(null===b)return null;for(var d={},e=j(b),f=0;f<e.length;f++){var g=c[e[f]],h=null;(l(g)||g.indexOf(a)>-1)&&(h=b[e[f]]),d[e[f]]=h}return d}function q(a){for(var b=a.slice(0),c=[];b.length>=1;){var d=r(0,b.length),e=b.splice(d,1);c.push(e)}return c}function r(a,b){if(l(a)||l(b)||a>=b)throw new Error("In randomFromTo(from,to), you must have from<to, but from="+a+" to="+b);return Math.floor(Math.random()*(b-a)+a)}function s(a){var c,d,e;if(l(a.set))if(l(a.setTurn))if(l(a.setRandomInteger))if(l(a.setVisibility))if(l(a["delete"]))if(l(a.shuffle))if(l(a.endMatch))m("Illegal operation, it must contain either set, setRandomInteger, setVisibility, delete, shuffle, or endMatch: "+angular.toJson(a,!0));else{d=a.endMatch,M++;var f=d.endMatchScores;(l(f)||f.length!==N.length)&&m("Field scores in EndMatch operation must be an array of the same length as the number of players. operation="+angular.toJson(a,!0)),R=f,"onlyAIs"===S&&b(i,1e3)}else{d=a.shuffle;var g=d.keys;(l(g)||0===g.length)&&m("Field keys in Shuffle operation must be a non empty array. operation="+angular.toJson(a,!0));for(var h=q(g),j=k(G),o=k(I),p=0;p<h.length;p++){var s=g[p],t=h[p];G[t]=j[s],I[t]=o[s]}}else d=a["delete"],c=d.key,l(c)&&m("Field key in Delete operation must be non null. operation="+angular.toJson(a,!0)),delete G[c],delete I[c];else d=a.setVisibility,c=d.key,e=d.visibleToPlayerIndexes,l(c)&&m("Fields key in SetVisibility operation must be non null. operation="+angular.toJson(a,!0)),I[c]=e;else{d=a.setRandomInteger,c=d.key;var u=d.from,v=d.to;(l(c)||l(u)||l(v))&&m("Fields key, from, and to, in SetRandomInteger operation must be non null. operation="+angular.toJson(a,!0));var w=r(u,v);G[c]=w,I[c]=null}else d=a.setTurn,Q=n(d,"turnIndex"),M++;else{d=a.set,c=d.key,e=d.visibleToPlayerIndexes;var x=d.value;(l(c)||l(x))&&m("Fields key and value in Set operation must be non null. operation="+angular.toJson(a,!0)),G[c]=x,I[c]=e}}function t(){return"playWhite"===S?0:"playBlack"===S?1:"playViewer"===S?-2:"playAgainstTheComputer"===S||"onlyAIs"===S?Q:"passAndPlay"===S?Q:S}function u(){return{turnIndexBeforeMove:L,turnIndex:Q,endMatchScores:R,moveNumber:P,randomSeed:O,lastMove:K,lastState:H,currentState:G,lastVisibleTo:J,currentVisibleTo:I}}function v(a){void 0!==a.turnIndexBeforeMove&&void 0!==a.turnIndex&&void 0!==a.endMatchScores&&(L=a.turnIndexBeforeMove,Q=a.turnIndex,R=a.endMatchScores,P=a.moveNumber?a.moveNumber:0,O=a.randomSeed,K=a.lastMove,H=a.lastState,G=a.currentState,J=a.lastVisibleTo,I=a.currentVisibleTo)}function w(){return void 0!==a.Intercom?a.Intercom.getInstance():null}function x(){var b=u(),c=w();null!=c?(a.localStorage.setItem(a.location.toString(),angular.toJson(b)),c.emit("broadcastUpdateUi",b)):A()}function y(a){c.info("gotBroadcastUpdateUi:",a),v(a),A()}function z(){var a=o(Q,K),b=p(Q,H,J),c=p(Q,G,I);K.length>0&&F.isMoveOk({move:a,turnIndexBeforeMove:L,turnIndexAfterMove:Q,stateBeforeMove:b,stateAfterMove:c,numberOfPlayers:N.length})!==!0&&m("You declared a hacker for a legal move! move="+a),F.updateUI({move:a,turnIndexBeforeMove:L,turnIndexAfterMove:Q,stateBeforeMove:b,stateAfterMove:c,yourPlayerIndex:t(),playersInfo:N,playMode:S,moveNumber:P,randomSeed:O,endMatchScores:R})}function A(){0===d.settings.simulateServerDelayMilliseconds?z():b(z,d.settings.simulateServerDelayMilliseconds)}function B(a){F||m("You must call setGame before any other method."),-1===Q&&m("You cannot send a move after the game ended!"),t()!==Q&&m("Expected a move from turnIndex="+Q+" but got the move from index="+t()),H=k(G),J=k(I),L=Q,Q=-1,K=a,P++,O&&Math.seedrandom(O+P),M=0;for(var b=0;b<K.length;b++)s(K[b]);1!==M&&m("We must have either SetTurn or EndMatch, but not both: setTurnOrEndMatchCount="+M),Q>=-1&&Q<N.length||m("turnIndex must be between -1 and "+N.length+", but it was "+Q+"."),x()}function C(b){void 0!==F&&m("You can call setGame only once"),F=b,n(F,"minNumberOfPlayers"),n(F,"maxNumberOfPlayers"),n(F,"isMoveOk"),n(F,"updateUI"),h();var c=w();if(null!=c){c.on("broadcastUpdateUi",y);var d=a.localStorage.getItem(a.location.toString());l(d)||v(angular.fromJson(d))}A()}function D(){if(!R)return!1;for(var a=R[0],b=0;b<R.length;b++)if(a!==R[b])return!1;return!0}function E(){if(!R||D())return null;for(var a=0,b=0;b<R.length;b++)R[a]<R[b]&&(a=b);return a}var F,G,H,I,J,K,L,M,N,O,P,Q=0,R=null,S="?onlyAIs"===location.search?"onlyAIs":"?playAgainstTheComputer"===location.search?"playAgainstTheComputer":"passAndPlay";d.settings={},d.settings.simulateServerDelayMilliseconds=0,this.getTurnIndex=function(){return Q},this.getYourPlayerIndex=t,this.isYourTurn=function(){return-1!==Q&&Q===t()},this.getEndMatchScores=function(){return R},this.isTie=D,this.getWinnerIndex=E,this.isWinner=function(){return E()===t()},this.setGame=C,this.makeMove=B,this.startNewMatch=i,this.init=h,this.setPlayMode=e,this.setRandomSeed=f,this.getMatchState=u,this.setMatchState=v}]),angular.module("myApp").service("gameService",["$window","$log","stateService","messageService","$timeout",function(a,b,c,d,e){"use strict";function f(a){return function(b){k=b,a(b)}}function g(a){if(b.info(["Making move:",a]),!k)throw new Error("Game called makeMove before getting updateUI or it called makeMove more than once for a single updateUI.");var f=k.turnIndexAfterMove>=0&&k.yourPlayerIndex===k.turnIndexAfterMove;if(!f)throw new Error("Game called makeMove when it wasn't your turn: yourPlayerIndex="+k.yourPlayerIndex+" turnIndexAfterMove="+k.turnIndexAfterMove);if(!a||!a.length)throw new Error("Game called makeMove with an empty move="+a);k=null,j?e(function(){c.makeMove(a)},100):d.sendMessage({makeMove:a})}function h(a){for(var b=[],c=0;c<a.maxNumberOfPlayers;c++)b.push({playerId:""+(c+42)});return b}function i(e){if(a.gameDeveloperEmail=e.gameDeveloperEmail,e.updateUI=f(e.updateUI),j)c.setGame(e);else{var g=e.isMoveOk,i=e.updateUI;d.addMessageListener(function(b){if(a.lastMessage=b,void 0!==b.isMoveOk){var c=g(b.isMoveOk);d.sendMessage({isMoveOkResult:c})}else void 0!==b.updateUI&&(k=b.updateUI,i(b.updateUI))}),delete e.isMoveOk,delete e.updateUI,d.sendMessage({gameReady:e}),b.info("Passing a 'fake' updateUI message in order to show an empty board to a viewer (so you can NOT perform moves)"),i({move:[],turnIndexBeforeMove:0,turnIndexAfterMove:0,stateBeforeMove:null,stateAfterMove:{},yourPlayerIndex:-2,playersInfo:h(e),playMode:"passAndPlay",endMatchScores:null})}}var j=a.parent===a||"?test"===a.location.search,k=null;this.makeMove=g,this.setGame=i}]),angular.module("myApp").service("messageService",["$window","$log","$rootScope",function(a,b,c){"use strict";var d=location.toString();this.sendMessage=function(c){b.info("Game sent message",c),c.gameUrl=d,a.parent.postMessage(c,"*")},this.addMessageListener=function(d){a.addEventListener("message",function(e){var f=e.source;f===a.parent&&c.$apply(function(){var a=e.data;b.info("Game got message",a),d(a)})},!1)}}]).factory("$exceptionHandler",["$window","$log",function(a,b){"use strict";return function(c,d){b.error("Game had an exception:",c,d);var e=angular.toJson({exception:c,stackTrace:c.stack,cause:d,lastMessage:a.lastMessage},!0),f={emailJavaScriptError:{gameDeveloperEmail:a.gameDeveloperEmail,emailSubject:"Error in game "+a.location,emailBody:e}};throw a.parent.postMessage(f,"*"),c}}]),angular.module("myApp").factory("alphaBetaService",[function(){"use strict";function a(a,d,e,f,g,h){if(!a||!e||!f)throw new Error("startingState or getNextStates or getStateScoreForIndex0 is null/undefined");if(0!==d&&1!==d)throw new Error("playerIndex must be either 0 or 1");if(!h.millisecondsLimit&&!h.maxDepth)throw new Error("alphaBetaLimits must have either millisecondsLimit or maxDepth");var i=(new Date).getTime();if(h.maxDepth)return c(a,d,e,f,g,h,i,0,Number.NEGATIVE_INFINITY,Number.POSITIVE_INFINITY).bestState;null!=g&&console.log("Doing iterative-deepeninh (A*) until we run out of time or find a certain win/lose move.");for(var j,k=1;;){null!=g&&console.log("Alpha-beta search until maxDepth="+k);var l=c(a,d,e,f,g,{maxDepth:k,millisecondsLimit:h.millisecondsLimit},i,0,Number.NEGATIVE_INFINITY,Number.POSITIVE_INFINITY),m=l.bestScore,n=l.bestState;if(m===Number.POSITIVE_INFINITY||m===Number.NEGATIVE_INFINITY){var o=m===(0===d?Number.POSITIVE_INFINITY:Number.NEGATIVE_INFINITY);return console.log("Discovered that AI is going to "+(o?"win":"lose")+" with maxDepth="+k),null!=g&&console.log("Best state is "+g(n)),n}var p=b({millisecondsLimit:h.millisecondsLimit/2},i),q=b(h,i);if(p||q){var r=q&&1!==k?j:n;return console.log(q?"Run out of time when maxDepth="+k+", so returning the best state for maxDepth="+(1===k?1:k-1):"Run out of half the time when maxDepth="+k+", so no point of exploring the next depth."),null!=g&&console.log("Best state is "+g(r)),r}j=n,k++}}function b(a,b){return a.millisecondsLimit&&(new Date).getTime()-b>a.millisecondsLimit}function c(a,d,e,f,g,h,i,j,k,l){var m=null,n=null;if(b(h,i))return null!=g&&console.log("Run out of time, just quitting from this traversal."),{bestScore:0,bestState:null};if(j===h.maxDepth)return m=f(a,d),null!=g&&console.log("Max depth reached, score is "+m),{bestScore:m,bestState:null};var o=e(a,d);if(null!=g&&console.log(g(a)+" has "+o.length+" next states"),0===o.length)return m=f(a,d),null!=g&&console.log("Terminal state, score is "+m),{bestScore:m,bestState:null};for(var p=0;p<o.length;p++){var q=o[p],r=c(q,1-d,e,f,g,h,i,j+1,k,l).bestScore;if(null!=g&&console.log("Score of "+g(q)+" is "+r),(null===m||0===d&&r>m||1===d&&m>r)&&(m=r,n=q),0===d){if(m>=l)return{bestScore:m,bestState:n};k=Math.max(k,m)}else{if(k>=m)return{bestScore:m,bestState:n};l=Math.min(l,m)}}return null!=g&&console.log("Best next state for playerIndex "+d+" is "+g(n)+" with score of "+m),{bestScore:m,bestState:n}}return{alphaBetaDecision:a}}]),angular.module("myApp").service("resizeGameAreaService",["$window","$log",function(a,b){"use strict";function c(a){g=a,h=null,e()}function d(a){return Math.round(100*a)/100}function e(){if(null!==g){var c=a.innerWidth,e=a.innerHeight;if(null===h||h.windowWidth!==c||h.windowHeight!==e){h={windowWidth:c,windowHeight:e};var i=f.getElementById("gameArea");if(0===c||0===e)return b.info("Window width/height is 0 so hiding gameArea div."),void(i.style.display="none");i.style.display="block";var j=c/e;j>g?c=d(e*g):e=d(c/g),b.info("Window size is "+h.windowWidth+"x"+h.windowHeight+" so setting gameArea size to "+c+"x"+e+" because widthToHeight="+g);var k=.95;c*=k,e*=k;var l=-e/2,m=-c/2;i.style.width=c+"px",i.style.height=e+"px",i.style.marginTop=""+l+"px",i.style.marginLeft=""+m+"px",i.style.position="absolute",i.style.left="50%",i.style.top="50%"}}}var f=a.document,g=null,h=null;a.onresize=e,a.onorientationchange=e,f.addEventListener("onresize",e),f.addEventListener("orientationchange",e),setInterval(e,1e3),this.setWidthToHeight=c}]);
//# sourceMappingURL=gameServices.min.js.map