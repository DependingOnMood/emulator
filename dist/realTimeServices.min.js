angular.module("myApp").service("realTimeService",["$window","$log","$timeout","messageService",function(a,b,c,d){"use strict";function e(b){if(l)throw new Error("You can call realTimeService.setGame(game) exactly once!");if(l=b,a.gameDeveloperEmail=l.gameDeveloperEmail,!(l&&l.gotStartMatch&&l.gotMessage&&l.gotEndMatch))throw new Error("When calling realTimeService.setGame(game), you must pass a game that has these 3 methods: gotStartMatch, gotMessage, and gotEndMatch.");k?f():(d.addMessageListener(function(b){if(a.lastMessage=b,b.gotStartMatch){if(m)throw new Error("Got message.gotStartMatch before getting gotEndMatch");if(m=b.gotStartMatch.playersInfo,!m||!m.length)throw new Error("Got message.gotStartMatch where playersInfo wasn't a non-empty array");l.gotStartMatch(b.gotStartMatch)}else if(b.gotMessage){if(!m)return;if(m.length<=1)throw new Error("Got message.gotMessage in single-player.");l.gotMessage(b.gotMessage)}else{if(!b.gotEndMatch)throw new Error("Unknown message: "+angular.toJson(b));m=null,l.gotEndMatch(b.gotEndMatch)}}),d.sendMessage({gameReady:!0}))}function f(){c(function(){b.info("Calling game.gotStartMatch"),m=[{playerId:42}],l.gotStartMatch({playersInfo:m,yourPlayerIndex:0,matchId:"someMatchIdForRandomSeed"})},2e3)}function g(a){if(!a||"string"!=typeof a)throw new Error("When calling realTimeService.sendReliableMessage(message), you must pass a non-empty string as the message.");if(a.length>=1e3&&console.log("CAREFUL: Maximum message length is 1000, but you passed a message of length "+a.length+". The platform will try to zip the message, but if it is still big then the match will be ended in a tie"),!m)throw new Error("You must not send a message before getting game.startMatch");if(k||1===m.length)throw new Error("You must not send a message when a single player is playing.")}function h(a){g(a),d.sendMessage({sendReliableMessage:a})}function i(a){g(a),d.sendMessage({sendUnreliableMessage:a})}function j(a){if(!m)throw new Error("You must not call realTimeService.endMatch(endMatchScores) before getting game.gotStartMatch");if(!a||a.length!==m.length)throw new Error("When calling realTimeService.endMatch(endMatchScores), you must pass an array of the same length as the number of players in gotStartMatch.");m=null,k?c(function(){b.info("Calling game.gotEndMatch"),l.gotEndMatch(a),f()},1e3):d.sendMessage({endMatch:a})}var k=a.parent===a||"?test"===a.location.search,l=null,m=null;this.setGame=e,this.sendReliableMessage=h,this.sendUnreliableMessage=i,this.endMatch=j}]),angular.module("myApp").service("messageService",["$window","$log","$rootScope",function(a,b,c){"use strict";this.sendMessage=function(c){b.info("Game sent message",c),a.parent.postMessage(c,"*")},this.addMessageListener=function(d){a.addEventListener("message",function(e){var f=e.source;f===a.parent&&c.$apply(function(){var a=e.data;b.info("Game got message",a),d(a)})},!1)}}]).factory("$exceptionHandler",["$window","$log",function(a,b){"use strict";return function(c,d){b.error("Game had an exception:",c,d);var e=angular.toJson({exception:c,stackTrace:c.stack,cause:d,lastMessage:a.lastMessage},!0),f={emailJavaScriptError:{gameDeveloperEmail:a.gameDeveloperEmail,emailSubject:"Error in game "+a.location,emailBody:e}};throw a.parent.postMessage(f,"*"),c}}]),angular.module("myApp").service("resizeGameAreaService",["$window","$log",function(a,b){"use strict";function c(a){g=a,e()}function d(a){return Math.round(100*a)/100}function e(){if(null!==g){var c=a.innerWidth,e=a.innerHeight;if(null===h||h.windowWidth!==c||h.windowHeight!==e){h={windowWidth:c,windowHeight:e};var i=f.getElementById("gameArea");if(0===c||0===e)return b.info("Window width/height is 0 so hiding gameArea div."),void(i.style.display="none");i.style.display="block";var j=c/e;j>g?(c=d(e*g),i.style.height=e+"px",i.style.width=c+"px"):(e=d(c/g),i.style.width=c+"px",i.style.height=e+"px"),b.info("Window size is "+h.windowWidth+"x"+h.windowHeight+" so setting gameArea size to "+c+"x"+e+" because widthToHeight="+g);var k=-e/2,l=-c/2;i.style.marginTop=""+k+"px",i.style.marginLeft=""+l+"px",i.style.position="absolute",i.style.left="50%",i.style.top="50%"}}}var f=a.document,g=null,h=null;a.onresize=e,a.onorientationchange=e,f.addEventListener("onresize",e),f.addEventListener("orientationchange",e),setInterval(e,1e3),this.setWidthToHeight=c}]);
//# sourceMappingURL=realTimeServices.min.js.map