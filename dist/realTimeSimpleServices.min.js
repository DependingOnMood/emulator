angular.module("myApp").service("realTimeSimpleService",["$window","$log","$timeout","messageService",function(a,b,c,d){"use strict";function e(){c(function(){b.info("Sending gotStartMatch"),h({gotStartMatch:{playersInfo:[{playerId:42}],randomSeed:"someRandomSeed"+Math.random()}})},2e3)}function f(a){if(!(a&&a.gotStartMatch&&a.gotMessage&&a.gotEndMatch))throw new Error("You must pass a game to init(game) with the methods: gotStartMatch, gotMessage, and gotEndMatch.");if(m)throw new Error("You can call realTimeSimpleService.init(game) exactly once!");m=a,n?e():(d.addMessageListener(h),d.sendMessage({gameReady:!0}))}function g(a){if(n){if(!a.endMatch)throw new Error("Shouldn't send messages in local testing");e()}else d.sendMessage(a)}function h(b){if(a.lastMessage=b,b.gotStartMatch){if(o&&m.gotEndMatch(null),o=b.gotStartMatch.playersInfo,1===o.length)b.gotStartMatch.yourPlayerIndex=0;else if(void 0===b.gotStartMatch.yourPlayerIndex)throw new Error("Can't do single-device multiplayer using realTimeSimpleService!");m.gotStartMatch(b.gotStartMatch)}else if(b.gotMessage){if(!o)return;m.gotMessage(b.gotMessage)}else{if(void 0===b.gotEndMatch)throw new Error("Unknown message: "+angular.toJson(b));if(!o)return;o=null,m.gotEndMatch(b.gotEndMatch)}}function i(a){if(!a||"string"!=typeof a)throw new Error("When calling realTimeService.sendReliableMessage(message), you must pass a non-empty string as the message.");if(a.length>=1e3&&console.log("CAREFUL: Maximum message length is 1000, but you passed a message of length "+a.length+". The platform will try to zip the message, but if it is still big then the match will be ended in a tie"),!o)throw new Error("You must not send a message before getting game.startMatch")}function j(a){i(a),1!==o.length&&g({sendReliableMessage:a})}function k(a){i(a),1!==o.length&&g({sendUnreliableMessage:a})}function l(a){if(!o)throw new Error("You must not call realTimeService.endMatch(endMatchScores) before getting game.gotStartMatch");if(!a||a.length!==o.length)throw new Error("When calling realTimeService.endMatch(endMatchScores), you must pass an array of the same length as the number of players in gotStartMatch.");m.gotEndMatch(a),o=null,g({endMatch:a})}var m,n=a.parent===a,o=null;this.init=f,this.sendReliableMessage=j,this.sendUnreliableMessage=k,this.endMatch=l}]),angular.module("myApp").service("messageService",["$window","$log","$rootScope",function(a,b,c){"use strict";var d=location.toString();this.sendMessage=function(c){b.info("Game sent message",c),c.gameUrl=d,a.parent.postMessage(c,"*")},this.addMessageListener=function(d){a.addEventListener("message",function(e){var f=e.source;f===a.parent&&c.$apply(function(){var a=e.data;b.info("Game got message",a),d(a)})},!1)}}]).factory("$exceptionHandler",["$window","$log",function(a,b){"use strict";return function(c,d){b.error("Game had an exception:",c,d);var e=angular.toJson({exception:c,stackTrace:c.stack,cause:d,lastMessage:a.lastMessage},!0),f={emailJavaScriptError:{gameDeveloperEmail:a.gameDeveloperEmail,emailSubject:"Error in game "+a.location,emailBody:e}};throw a.parent.postMessage(f,"*"),c}}]),angular.module("myApp").service("resizeGameAreaService",["$window","$log",function(a,b){"use strict";function c(a){if(g=a,f=i.getElementById("gameArea"),!f)throw new Error("You forgot to add to your <body> this div: <div id='gameArea'>...</div>");h=null,e()}function d(a){return Math.round(100*a)/100}function e(){if(null!==g){var c=a.innerWidth,e=a.innerHeight,i=c,j=e;if(null===h||h.windowWidth!==i||h.windowHeight!==j){if(h={windowWidth:i,windowHeight:j},0===i||0===j)return b.info("Window width/height is 0 so hiding gameArea div."),void(f.style.display="none");f.style.display="block";var k=i/j;k>g?i=d(j*g):j=d(i/g),b.info("Window size is "+h.windowWidth+"x"+h.windowHeight+" so setting gameArea size to "+i+"x"+j+" because widthToHeight="+g);var l=.95;i*=l,j*=l,f.style.width=i+"px",f.style.height=j+"px",f.style.position="absolute",f.style.left=(c-i)/2+"px",f.style.top=(e-j)/2+"px"}}}var f,g=null,h=null,i=a.document;a.onresize=e,a.onorientationchange=e,i.addEventListener("onresize",e),i.addEventListener("orientationchange",e),setInterval(e,1e3),this.setWidthToHeight=c}]);
//# sourceMappingURL=realTimeSimpleServices.min.js.map