angular.module("myApp").service("stateService",["$window","$timeout","$log","$rootScope",function(a,b,c,d){"use strict";function e(a){O=a,void 0!==D&&(f(),y())}function f(){L=[];for(var a=0;a<D.maxNumberOfPlayers;a++){var b="onlyAIs"===O||0!==a&&"playAgainstTheComputer"===O?"":""+(a+42);L.push({playerId:b})}}function g(){D||l("You must call setGame before any other method."),f(),E={},F=null,G={},H=null,I=[],J=0,M=0,N=null}function h(){g(),v()}function i(a){var b=[];for(var c in a)a.hasOwnProperty(c)&&b.push(c);return b}function j(a){return angular.copy(a)}function k(a){return void 0===a||null===a}function l(){c.error("Throwing an error with these arguments=",arguments);var b=Array.prototype.join.call(arguments,", ");throw a.alert("Error: "+b),new Error(b)}function m(a,b){return k(a[b])&&l("You must have a field named '",b,"' in this object=",a),a[b]}function n(a,b){for(var c=[],d=0;d<b.length;d++){var e=b[d];c.push(k(e.set)||k(e.set.visibleToPlayerIndexes)||-1!==e.set.visibleToPlayerIndexes.indexOf(a)?e:{type:"Set",key:e.set.key,value:null,visibleToPlayerIndexes:e.set.visibleToPlayerIndexes})}return c}function o(a,b,c){if(null===b)return null;for(var d={},e=i(b),f=0;f<e.length;f++){var g=c[e[f]],h=null;(k(g)||g.indexOf(a)>-1)&&(h=b[e[f]]),d[e[f]]=h}return d}function p(a){for(var b=a.slice(0),c=[];b.length>=1;){var d=Math.floor(Math.random()*b.length),e=b.splice(d,1);c.push(e)}return c}function q(a){var c,d,e;if(k(a.set))if(k(a.setTurn))if(k(a.setRandomInteger))if(k(a.setVisibility))if(k(a["delete"]))if(k(a.shuffle))if(k(a.endMatch))l("Illegal operation, it must contain either set, setRandomInteger, setVisibility, delete, shuffle, or endMatch: "+angular.toJson(a,!0));else{d=a.endMatch,K++;var f=d.endMatchScores;(k(f)||f.length!==L.length)&&l("Field scores in EndMatch operation must be an array of the same length as the number of players. operation="+angular.toJson(a,!0)),N=f,"onlyAIs"===O&&b(h,1e3)}else{d=a.shuffle;var g=d.keys;(k(g)||0===g.length)&&l("Field keys in Shuffle operation must be a non empty array. operation="+angular.toJson(a,!0));for(var i=p(g),n=j(E),o=j(G),q=0;q<i.length;q++){var r=g[q],s=i[q];E[s]=n[r],G[s]=o[r]}}else d=a["delete"],c=d.key,k(c)&&l("Field key in Delete operation must be non null. operation="+angular.toJson(a,!0)),delete E[c],delete G[c];else d=a.setVisibility,c=d.key,e=d.visibleToPlayerIndexes,k(c)&&l("Fields key in SetVisibility operation must be non null. operation="+angular.toJson(a,!0)),G[c]=e;else{d=a.setRandomInteger,c=d.key;var t=d.from,u=d.to;(k(c)||k(t)||k(u))&&l("Fields key, from, and to, in SetRandomInteger operation must be non null. operation="+angular.toJson(a,!0));var v=Math.floor(Math.random()*(u-t)+t);E[c]=v,G[c]=null}else d=a.setTurn,M=m(d,"turnIndex"),K++;else{d=a.set,c=d.key,e=d.visibleToPlayerIndexes;var w=d.value;(k(c)||k(w))&&l("Fields key and value in Set operation must be non null. operation="+angular.toJson(a,!0)),E[c]=w,G[c]=e}}function r(){return"playWhite"===O?0:"playBlack"===O?1:"playViewer"===O?-2:"playAgainstTheComputer"===O||"onlyAIs"===O?M:"passAndPlay"===O?M:O}function s(){return{turnIndexBeforeMove:J,turnIndex:M,endMatchScores:N,lastMove:I,lastState:F,currentState:E,lastVisibleTo:H,currentVisibleTo:G}}function t(a){void 0!==a.turnIndexBeforeMove&&void 0!==a.turnIndex&&void 0!==a.endMatchScores&&(J=a.turnIndexBeforeMove,M=a.turnIndex,N=a.endMatchScores,I=a.lastMove,F=a.lastState,E=a.currentState,H=a.lastVisibleTo,G=a.currentVisibleTo)}function u(){return void 0!==a.Intercom?a.Intercom.getInstance():null}function v(){var b=s(),c=u();null!=c?(a.localStorage.setItem(a.location.toString(),angular.toJson(b)),c.emit("broadcastUpdateUi",b)):y()}function w(a){c.info("gotBroadcastUpdateUi:",a),t(a),y()}function x(){var a=n(M,I),b=o(M,F,H),c=o(M,E,G);I.length>0&&D.isMoveOk({move:a,turnIndexBeforeMove:J,turnIndexAfterMove:M,stateBeforeMove:b,stateAfterMove:c,numberOfPlayers:L.length})!==!0&&l("You declared a hacker for a legal move! move="+a),D.updateUI({move:a,turnIndexBeforeMove:J,turnIndexAfterMove:M,stateBeforeMove:b,stateAfterMove:c,yourPlayerIndex:r(),playersInfo:L,playMode:O,endMatchScores:N})}function y(){0===d.settings.simulateServerDelayMilliseconds?x():b(x,d.settings.simulateServerDelayMilliseconds)}function z(a){D||l("You must call setGame before any other method."),-1===M&&l("You cannot send a move after the game ended!"),r()!==M&&l("Expected a move from turnIndex="+M+" but got the move from index="+r()),F=j(E),H=j(G),J=M,M=-1,I=a,K=0;for(var b=0;b<I.length;b++)q(I[b]);1!==K&&l("We must have either SetTurn or EndMatch, but not both: setTurnOrEndMatchCount="+K),M>=-1&&M<L.length||l("turnIndex must be between -1 and "+L.length+", but it was "+M+"."),v()}function A(b){void 0!==D&&l("You can call setGame only once"),D=b,m(D,"minNumberOfPlayers"),m(D,"maxNumberOfPlayers"),m(D,"isMoveOk"),m(D,"updateUI"),g();var c=u();if(null!=c){c.on("broadcastUpdateUi",w);var d=a.localStorage.getItem(a.location.toString());k(d)||t(angular.fromJson(d))}y()}function B(){if(!N)return!1;for(var a=N[0],b=0;b<N.length;b++)if(a!==N[b])return!1;return!0}function C(){if(!N||B())return null;for(var a=0,b=0;b<N.length;b++)N[a]<N[b]&&(a=b);return a}var D,E,F,G,H,I,J,K,L,M=0,N=null,O="?onlyAIs"===location.search?"onlyAIs":"?playAgainstTheComputer"===location.search?"playAgainstTheComputer":"passAndPlay";d.settings={},d.settings.simulateServerDelayMilliseconds=0,this.getTurnIndex=function(){return M},this.getYourPlayerIndex=r,this.isYourTurn=function(){return-1!==M&&M===r()},this.getEndMatchScores=function(){return N},this.isTie=B,this.getWinnerIndex=C,this.isWinner=function(){return C()===r()},this.setGame=A,this.makeMove=z,this.startNewMatch=h,this.init=g,this.setPlayMode=e,this.getMatchState=s,this.setMatchState=t}]),angular.module("myApp").service("gameService",["$window","$log","stateService","messageService",function(a,b,c,d){"use strict";function e(a){b.info(["Making move:",a]),h?c.makeMove(a):d.sendMessage({makeMove:a})}function f(a){for(var b=[],c=0;c<a.maxNumberOfPlayers;c++)b.push({playerId:""+(c+42)});return b}function g(b){if(a.gameDeveloperEmail=b.gameDeveloperEmail,h)c.setGame(b);else{var e=b.isMoveOk,g=b.updateUI;d.addMessageListener(function(b){if(a.lastMessage=b,void 0!==b.isMoveOk){var c=e(b.isMoveOk);d.sendMessage({isMoveOkResult:c})}else void 0!==b.updateUI&&g(b.updateUI)}),delete b.isMoveOk,delete b.updateUI,d.sendMessage({gameReady:b}),g({move:[],turnIndexBeforeMove:0,turnIndexAfterMove:0,stateBeforeMove:null,stateAfterMove:{},yourPlayerIndex:-2,playersInfo:f(b),playMode:"passAndPlay",endMatchScores:null})}}var h=a.parent===a||"?test"===a.location.search;this.makeMove=e,this.setGame=g}]),angular.module("myApp").service("messageService",["$window","$log","$rootScope",function(a,b,c){"use strict";this.sendMessage=function(c){b.info("Game sent message",c),a.parent.postMessage(c,"*")},this.addMessageListener=function(d){a.addEventListener("message",function(e){var f=e.source;f===a.parent&&c.$apply(function(){var a=e.data;b.info("Game got message",a),d(a)})},!1)}}]).factory("$exceptionHandler",["$window","$log",function(a,b){"use strict";return function(c,d){b.info("Game had an exception:",c,d);var e=angular.toJson({exception:c,cause:d,lastMessage:a.lastMessage},!0),f={emailJavaScriptError:{gameDeveloperEmail:a.gameDeveloperEmail,emailSubject:"Error in game "+a.location,emailBody:e}};a.parent.postMessage(f,"*"),a.alert(e)}}]),angular.module("myApp").factory("alphaBetaService",[function(){"use strict";function a(a,d,e,f,g,h){if(!a||!e||!f)throw new Error("startingState or getNextStates or getStateScoreForIndex0 is null/undefined");if(0!==d&&1!==d)throw new Error("playerIndex must be either 0 or 1");if(!h.millisecondsLimit&&!h.maxDepth)throw new Error("alphaBetaLimits must have either millisecondsLimit or maxDepth");var i=(new Date).getTime();if(h.maxDepth)return c(a,d,e,f,g,h,i,0,Number.NEGATIVE_INFINITY,Number.POSITIVE_INFINITY).bestState;null!=g&&console.log("Doing iterative-deepeninh (A*) until we run out of time or find a certain win/lose move.");for(var j,k=1;;){null!=g&&console.log("Alpha-beta search until maxDepth="+k);var l=c(a,d,e,f,g,{maxDepth:k,millisecondsLimit:h.millisecondsLimit},i,0,Number.NEGATIVE_INFINITY,Number.POSITIVE_INFINITY),m=l.bestScore,n=l.bestState;if(m===Number.POSITIVE_INFINITY||m===Number.NEGATIVE_INFINITY){var o=m===d===0?Number.POSITIVE_INFINITY:Number.NEGATIVE_INFINITY;return console.log("Discovered that AI is going to "+(o?"win":"lose")+" with maxDepth="+k),null!=g&&console.log("Best state is "+g(n)),n}var p=b({millisecondsLimit:h.millisecondsLimit/2},i),q=b(h,i);if(p||q){var r=q&&1!==k?j:n;return console.log(q?"Run out of time when maxDepth="+k+", so returning the best state for maxDepth="+(1===k?1:k-1):"Run out of half the time when maxDepth="+k+", so no point of exploring the next depth."),null!=g&&console.log("Best state is "+g(r)),r}j=n,k++}}function b(a,b){return a.millisecondsLimit&&(new Date).getTime()-b>a.millisecondsLimit}function c(a,d,e,f,g,h,i,j,k,l){var m=e(a,d),n=null,o=null;if(null!=g&&console.log(g(a)+" has "+m.length+" next states"),0===m.length||j===h.maxDepth||b(h,i))return n=f(a,d),null!=g&&console.log((0===m.length?"Terminal state":j===h.maxDepth?"Max depth reached":"Time limit reached")+", score is "+n),{bestScore:n,bestState:null};for(var p=0;p<m.length;p++){var q=m[p],r=c(q,1-d,e,f,g,h,i,j+1,k,l).bestScore;if(null!=g&&console.log("Score of "+g(q)+" is "+r),(null===n||0===d&&r>n||1===d&&n>r)&&(n=r,o=q),0===d){if(n>=l)return{bestScore:n,bestState:o};k=Math.max(k,n)}else{if(k>=n)return{bestScore:n,bestState:o};l=Math.min(l,n)}}return null!=g&&console.log("Best next state for playerIndex "+d+" is "+g(o)+" with score of "+n),{bestScore:n,bestState:o}}return{alphaBetaDecision:a}}]),angular.module("myApp").service("resizeGameAreaService",["$window","$log",function(a,b){"use strict";function c(a){g=a,e()}function d(a){return Math.round(100*a)/100}function e(){if(null!==g){var c=a.innerWidth,e=a.innerHeight;if(null===h||h.windowWidth!==c||h.windowHeight!==e){h={windowWidth:c,windowHeight:e};var i=f.getElementById("gameArea");if(0===c||0===e)return b.info("Window width/height is 0 so hiding gameArea div."),void(i.style.display="none");i.style.display="block";var j=c/e;j>g?(c=d(e*g),i.style.height=e+"px",i.style.width=c+"px"):(e=d(c/g),i.style.width=c+"px",i.style.height=e+"px"),b.info("Window size is "+h.windowWidth+"x"+h.windowHeight+" so setting gameArea size to "+c+"x"+e+" because widthToHeight="+g);var k=-e/2,l=-c/2;i.style.marginTop=""+k+"px",i.style.marginLeft=""+l+"px",i.style.position="absolute",i.style.left="50%",i.style.top="50%"}}}var f=a.document,g=null,h=null;a.onresize=e,a.onorientationchange=e,f.addEventListener("onresize",e),f.addEventListener("orientationchange",e),setInterval(e,1e3),this.setWidthToHeight=c}]);
//# sourceMappingURL=gameServices.min.js.map