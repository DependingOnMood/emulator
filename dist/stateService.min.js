angular.module("myApp").service("stateService",["$window","$timeout","$log","$rootScope",function(a,b,c,d){"use strict";function e(a){R=a,void 0!==E&&(g(),z())}function f(a){N=a}function g(){M=[];for(var a=0;a<E.maxNumberOfPlayers;a++){var b="onlyAIs"===R||0!==a&&"playAgainstTheComputer"===R?"":""+(a+42);M.push({playerId:b})}}function h(){E||m("You must call setGame before any other method."),g(),F={},G=null,H={},I=null,J=[],K=0,P=0,Q=null,O=0}function i(){h(),w()}function j(a){var b=[];for(var c in a)a.hasOwnProperty(c)&&b.push(c);return b}function k(a){return angular.copy(a)}function l(a){return void 0===a||null===a}function m(){c.error("Throwing an error with these arguments=",arguments);var b=Array.prototype.join.call(arguments,", ");throw a.alert("Error: "+b),new Error(b)}function n(a,b){return l(a[b])&&m("You must have a field named '",b,"' in this object=",a),a[b]}function o(a,b){for(var c=[],d=0;d<b.length;d++){var e=b[d];c.push(l(e.set)||l(e.set.visibleToPlayerIndexes)||-1!==e.set.visibleToPlayerIndexes.indexOf(a)?e:{type:"Set",key:e.set.key,value:null,visibleToPlayerIndexes:e.set.visibleToPlayerIndexes})}return c}function p(a,b,c){if(null===b)return null;for(var d={},e=j(b),f=0;f<e.length;f++){var g=c[e[f]],h=null;(l(g)||g.indexOf(a)>-1)&&(h=b[e[f]]),d[e[f]]=h}return d}function q(a){for(var b=a.slice(0),c=[];b.length>=1;){var d=Math.floor(Math.random()*b.length),e=b.splice(d,1);c.push(e)}return c}function r(a){var c,d,e;if(l(a.set))if(l(a.setTurn))if(l(a.setRandomInteger))if(l(a.setVisibility))if(l(a["delete"]))if(l(a.shuffle))if(l(a.endMatch))m("Illegal operation, it must contain either set, setRandomInteger, setVisibility, delete, shuffle, or endMatch: "+angular.toJson(a,!0));else{d=a.endMatch,L++;var f=d.endMatchScores;(l(f)||f.length!==M.length)&&m("Field scores in EndMatch operation must be an array of the same length as the number of players. operation="+angular.toJson(a,!0)),Q=f,"onlyAIs"===R&&b(i,1e3)}else{d=a.shuffle;var g=d.keys;(l(g)||0===g.length)&&m("Field keys in Shuffle operation must be a non empty array. operation="+angular.toJson(a,!0));for(var h=q(g),j=k(F),o=k(H),p=0;p<h.length;p++){var r=g[p],s=h[p];F[s]=j[r],H[s]=o[r]}}else d=a["delete"],c=d.key,l(c)&&m("Field key in Delete operation must be non null. operation="+angular.toJson(a,!0)),delete F[c],delete H[c];else d=a.setVisibility,c=d.key,e=d.visibleToPlayerIndexes,l(c)&&m("Fields key in SetVisibility operation must be non null. operation="+angular.toJson(a,!0)),H[c]=e;else{d=a.setRandomInteger,c=d.key;var t=d.from,u=d.to;(l(c)||l(t)||l(u))&&m("Fields key, from, and to, in SetRandomInteger operation must be non null. operation="+angular.toJson(a,!0));var v=Math.floor(Math.random()*(u-t)+t);F[c]=v,H[c]=null}else d=a.setTurn,P=n(d,"turnIndex"),L++;else{d=a.set,c=d.key,e=d.visibleToPlayerIndexes;var w=d.value;(l(c)||l(w))&&m("Fields key and value in Set operation must be non null. operation="+angular.toJson(a,!0)),F[c]=w,H[c]=e}}function s(){return"playWhite"===R?0:"playBlack"===R?1:"playViewer"===R?-2:"playAgainstTheComputer"===R||"onlyAIs"===R?P:"passAndPlay"===R?P:R}function t(){return{turnIndexBeforeMove:K,turnIndex:P,endMatchScores:Q,moveNumber:O,randomSeed:N,lastMove:J,lastState:G,currentState:F,lastVisibleTo:I,currentVisibleTo:H}}function u(a){void 0!==a.turnIndexBeforeMove&&void 0!==a.turnIndex&&void 0!==a.endMatchScores&&(K=a.turnIndexBeforeMove,P=a.turnIndex,Q=a.endMatchScores,O=a.moveNumber?a.moveNumber:0,N=a.randomSeed,J=a.lastMove,G=a.lastState,F=a.currentState,I=a.lastVisibleTo,H=a.currentVisibleTo)}function v(){return void 0!==a.Intercom?a.Intercom.getInstance():null}function w(){var b=t(),c=v();null!=c?(a.localStorage.setItem(a.location.toString(),angular.toJson(b)),c.emit("broadcastUpdateUi",b)):z()}function x(a){c.info("gotBroadcastUpdateUi:",a),u(a),z()}function y(){var a=o(P,J),b=p(P,G,I),c=p(P,F,H);J.length>0&&E.isMoveOk({move:a,turnIndexBeforeMove:K,turnIndexAfterMove:P,stateBeforeMove:b,stateAfterMove:c,numberOfPlayers:M.length})!==!0&&m("You declared a hacker for a legal move! move="+a),E.updateUI({move:a,turnIndexBeforeMove:K,turnIndexAfterMove:P,stateBeforeMove:b,stateAfterMove:c,yourPlayerIndex:s(),playersInfo:M,playMode:R,moveNumber:O,randomSeed:N,endMatchScores:Q})}function z(){0===d.settings.simulateServerDelayMilliseconds?y():b(y,d.settings.simulateServerDelayMilliseconds)}function A(a){E||m("You must call setGame before any other method."),-1===P&&m("You cannot send a move after the game ended!"),s()!==P&&m("Expected a move from turnIndex="+P+" but got the move from index="+s()),G=k(F),I=k(H),K=P,P=-1,J=a,O++,N&&Math.seedrandom(N+O),L=0;for(var b=0;b<J.length;b++)r(J[b]);1!==L&&m("We must have either SetTurn or EndMatch, but not both: setTurnOrEndMatchCount="+L),P>=-1&&P<M.length||m("turnIndex must be between -1 and "+M.length+", but it was "+P+"."),w()}function B(b){void 0!==E&&m("You can call setGame only once"),E=b,n(E,"minNumberOfPlayers"),n(E,"maxNumberOfPlayers"),n(E,"isMoveOk"),n(E,"updateUI"),h();var c=v();if(null!=c){c.on("broadcastUpdateUi",x);var d=a.localStorage.getItem(a.location.toString());l(d)||u(angular.fromJson(d))}z()}function C(){if(!Q)return!1;for(var a=Q[0],b=0;b<Q.length;b++)if(a!==Q[b])return!1;return!0}function D(){if(!Q||C())return null;for(var a=0,b=0;b<Q.length;b++)Q[a]<Q[b]&&(a=b);return a}var E,F,G,H,I,J,K,L,M,N,O,P=0,Q=null,R="?onlyAIs"===location.search?"onlyAIs":"?playAgainstTheComputer"===location.search?"playAgainstTheComputer":"passAndPlay";d.settings={},d.settings.simulateServerDelayMilliseconds=0,this.getTurnIndex=function(){return P},this.getYourPlayerIndex=s,this.isYourTurn=function(){return-1!==P&&P===s()},this.getEndMatchScores=function(){return Q},this.isTie=C,this.getWinnerIndex=D,this.isWinner=function(){return D()===s()},this.setGame=B,this.makeMove=A,this.startNewMatch=i,this.init=h,this.setPlayMode=e,this.setRandomSeed=f,this.getMatchState=t,this.setMatchState=u}]);
//# sourceMappingURL=stateService.min.js.map